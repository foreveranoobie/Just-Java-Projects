package ua.nure.storozhuk.practice8.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;

import ua.nure.storozhuk.practice8.db.entity.Team;
import ua.nure.storozhuk.practice8.db.entity.User;

public class DBManager {
	Connection conn;
	Statement st;
	ResultSet rs;

	public static DBManager getInstance() {
		return new DBManager();
	}
	
	public DBManager() {
		ResourceBundle mybundle = ResourceBundle.getBundle("app");
		String url = mybundle.getString("connection.url");
		try {
			conn = DriverManager.getConnection(url, "root", "67245");
			conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
			st = conn.createStatement();
			conn.setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		if (rs != null) {
			try {
				rs.next();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void updateTeam(Team team) {
		try {
			st.execute("update teams set name = '"+team.getName()+"' where id = " + team.getId());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void deleteTeam(Team team) {
		try {
			st.execute("delete from teams where name = '"+team.getName()+"'");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Team> getUserTeams(User user) {
		try {
			rs = st.executeQuery("select users_teams.team_id, teams.name from teams" + " inner join users_teams "
					+ "on users_teams.team_id = teams.id" + " and users_teams.user_id = " + user.getId());
			List<Team> userTeams = new LinkedList<>();
			if (rs.next()) {
				userTeams.add(new Team(rs.getInt(1), rs.getString(2)));
				while (rs.next()) {
					userTeams.add(new Team(rs.getInt(1), rs.getString(2)));
				}
				return userTeams;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public boolean setTeamsForUser(User user, Team... teams) {
		for (Team team : teams) {
			try {
				PreparedStatement prepState = conn
						.prepareStatement("INSERT INTO users_teams(user_id, team_id)" + "VALUES (?,?)");
				prepState.setInt(1, user.getId());
				prepState.setInt(2, team.getId());
				prepState.execute();
				conn.commit();
			} catch (SQLException e) {
				try {
					conn.rollback();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
				e.printStackTrace();
			}
		}
		return false;
	}

	public User getUser(String login) {
		try {
			rs = st.executeQuery("SELECT * FROM users WHERE users.login = '" + login + "'");
			if (rs != null) {
				rs.next();
				return new User(rs.getInt(1), rs.getString(2));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public Team getTeam(String name) {
		try {
			rs = st.executeQuery("SELECT * FROM teams WHERE teams.name = '" + name + "'");
			if (rs != null) {
				rs.next();
				return new Team(rs.getInt(1), rs.getString(2));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Team> findAllTeams() {
		ArrayList<Team> array = new ArrayList<>();
		try {
			rs = st.executeQuery("SELECT * FROM teams ORDER BY id");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			while (rs.next()) {
				array.add(new Team(rs.getInt(1), rs.getString(2)));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return array;
	}

	public List<User> findAllUsers() {
		ArrayList<User> array = new ArrayList<>();
		try {
			rs = st.executeQuery("SELECT * FROM users ORDER BY id");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			while (rs.next()) {
				array.add(new User(rs.getInt(1), rs.getString(2)));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return array;
	}

	public void insertTeam(Team team) throws SQLException {
		try {
			int num = st.executeUpdate("INSERT INTO teams (name) VALUES ('" + team.getName() + "')",
					Statement.RETURN_GENERATED_KEYS);
			ResultSet result = st.getGeneratedKeys();
			while (result.next()) {
			}
			result.previous();
			team.setId(result.getInt(1));
			conn.commit();
		} catch (SQLException e) {
			conn.rollback();
			throw e;
		}
	}

	public void insertUser(User user) throws SQLException {
		try {
			int num = st.executeUpdate("INSERT INTO users (login) VALUES ('" + user.getLogin() + "')",
					Statement.RETURN_GENERATED_KEYS);
			ResultSet result = st.getGeneratedKeys();
			while (result.next()) {
			}
			result.previous();
			user.setId(result.getInt(1));
			conn.commit();
		} catch (SQLException e) {
			conn.rollback();
			throw e;
		}
	}

	public void closeCon() {
		try {
			st.close();
			rs.close();
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
