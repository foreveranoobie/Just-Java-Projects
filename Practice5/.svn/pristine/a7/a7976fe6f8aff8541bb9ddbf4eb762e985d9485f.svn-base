package ua.nure.storozhuk.practice5;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

public class Part5 {

	public static void main(String[] args) throws IOException, InterruptedException {
		File file = new File("part5.txt");
		if (file.exists()) {
			file.delete();
		}
		RandomAccessFile raf = new RandomAccessFile(file, "rw");
		int[] seeks = new int[10];
		seeks[0] = 0;
		for (int m = 0; m < 9; m++) {
			raf.write(new byte[20]);
			raf.write("\r\n".getBytes());
			seeks[m + 1] = (int) raf.getFilePointer();
		}
		raf.write(new byte[20]);
		Recorder[] threads = new Recorder[10];
		for (int m = 0; m < 10; m++) {
			threads[m] = new Recorder(m, seeks[m], raf);
			threads[m].start();
		}
		for (int m = 0; m < 10; m++) {
			threads[m].join();
		}
		raf.seek(0);
		while (raf.getFilePointer() != raf.length()) {
			System.out.println(raf.readLine());
		}
		raf.close();
	}

}

class Recorder extends Thread {
	int num;
	int seek;
	RandomAccessFile raf;

	public Recorder(int num, int seek, RandomAccessFile raf) {
		this.num = num;
		this.seek = seek;
		this.raf = raf;
	}

	public void run() {
		for (int m = 0; m < 20; m++) {
			synchronized (raf) {
				try {
					Thread.sleep(1);
					raf.seek(seek);
					raf.write('0' + num);
					seek = (int) raf.getFilePointer();
				} catch (IOException | InterruptedException e) {
					e.printStackTrace();
				}
				if(m == 19) {
					try {
						raf.seek(seek);
						raf.write("\r\n".getBytes());
						seek = (int) raf.getFilePointer();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
	}
}
