package ua.nure.storozhuk.practice5;

public class Part3 {
	private static Part3 M;
	private int counter;
	private int counter2;
	private Thread[] threads;
	private int n;

	public Part3(int n, int k, int t) {
		threads = new Thread[n * 2];
		this.n = n;
		for (int count = 0; count < n; count++) {
			threads[count] = new Thread() {
				public void run() {
					for (int m = 0; m < k; m++) {
						System.out.printf("%s %s%n", counter, counter2);
						counter++;
						try {
							Thread.sleep(t);
							counter2++;
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			};
		}
		M = this;
		for (int count = n; count < n * 2; count++) {
			threads[count] = new Thread() {
				public void run() {
					for (int m = 0; m < k; m++) {
						synchronized (M) {
							System.out.printf("%s %s%n", M.counter, M.counter2);
							M.counter++;
							try {
								Thread.sleep(t);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							M.counter2++;
						}
					}
				};
			};
		}
	}

	public Part3() {
	}

	public void test() {
		for (int m = 0; m < n; m++) {
			threads[m].start();
		}
	}

	public void reset() throws InterruptedException {
		for (int m = 0; m < n; m++) {
			threads[m].join();
		}
		counter = 0;
		counter2 = 0;
	}

	public void testSync() throws InterruptedException {
		for (int m = n; m < n * 2; m++) {
			threads[m].start();
		}
		for (int m = n; m < threads.length; m++) {
			threads[m].join();
		}
	}

	public static void main(String[] args) throws InterruptedException {
		Part3 p = new Part3(5, 5, 20);
		p.test();
		p.reset();
		System.out.println("~~~~~~~~~~~");
		p.testSync();
	}

}
