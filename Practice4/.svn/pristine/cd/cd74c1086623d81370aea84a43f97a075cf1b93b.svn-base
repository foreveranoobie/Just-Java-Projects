package ua.nure.storozhuk.practice4;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Part3 {
	private static final String ENCODING = "Cp1251";

	public static void getInt(String input) {
		Pattern p = Pattern.compile("([\\s\\w]\\b\\d+\\b[\\s\\w])|(0x\\d+[^A-Za-z])", Pattern.MULTILINE);
		Matcher m = p.matcher(input);
//		if(!m.find()) {
//			System.out.println("No such values");
//		}
		while (m.find()) {
			System.out.print(m.group().trim() + " ");
		}
		System.out.println();
	}

	public static void getDouble(String input) {
		Pattern p = Pattern.compile("[^A-Za-zÀ-ßà-ÿ](\\d*\\.\\d+)|(\\d+\\.\\d*)|(\\d+\\.\\d+)[^A-Za-zÀ-ßà-ÿ]", Pattern.MULTILINE);
		Matcher m = p.matcher(input);
        boolean found = false;
		while (m.find()) {
			found = true;
			System.out.print(m.group().trim() + " ");
		}
		if(found == false) {
			System.out.println("No such values");
			return;
		}
		System.out.println();
	}

	public static void getChar(String input) {
		Pattern p = Pattern.compile("\\b[À-ß¨¯²ºà-ÿ¸¿º³A-Za-z]\\b", Pattern.MULTILINE);
		Matcher m = p.matcher(input);
		boolean found = false;
		while (m.find()) {
			found = true;
			System.out.print(m.group()+" ");
		}
		if(found == false) {
			System.out.println("No such values");
			return;
		}
		System.out.println();
	}

	public static void getString(String input) {
		Pattern p = Pattern.compile("[A-ZÀ-ß¨¯ª²a-zà-ÿ¸¿º³]{2,}", Pattern.MULTILINE);
		Matcher m = p.matcher(input);
		boolean found = false;
		while (m.find()) {
			found = true;
			System.out.print(m.group()+" ");
		}
		if(found == false) {
			System.out.println("No such values");
			return;
		}
		System.out.println();
	}

	public static void main(String[] args) throws FileNotFoundException {
		String input = readFile("part3.txt");
		Scanner scan = new Scanner(System.in);
		String entry = scan.nextLine();
		loop:while (!entry.equals("stop")) {
			switch (entry) {
			case "int":
				getInt(input);
				break;
			case "double":
				getDouble(input);
				break;
			case "char":
				getChar(input);
				break;
			case "String":
				getString(input);
				break;
			case "stop":
				break loop;
			default:
				System.out.print("Incorrect input\n");
				break;
			}
			entry = scan.nextLine();
		}
		scan.close();
	}

	public static String readFile(String path) {
		String res = null;
		try {
			byte[] bytes = Files.readAllBytes(Paths.get(path));
			res = new String(bytes, ENCODING);
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return res;
	}

}
